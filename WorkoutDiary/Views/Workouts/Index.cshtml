@model List<WorkoutDiary.Models.Workout>
@{
    ViewData["Title"] = "Дневник тренировок";

    var currentMonth = ViewBag.CurrentMonth;
    var currentYear = ViewBag.CurrentYear;
    var daysInMonth = DateTime.DaysInMonth(currentYear, currentMonth);
    var firstDayOfMonth = new DateTime(currentYear, currentMonth, 1);
    var firstDayOfWeek = (int)firstDayOfMonth.DayOfWeek;
    var today = DateTime.Today;
    var selectedDate = (DateTime)ViewBag.SelectedDate;
    var workoutDates = (List<DateTime>)ViewBag.WorkoutDates;
}

<div style="display: flex;">
    <!-- Календарь -->
    <div style="width: 30%; padding: 10px;">
        <h3>Календарь</h3>
        <form asp-action="Index" method="get" id="calendarForm">
            <div style="margin-bottom: 10px;">
                <select name="month" onchange="this.form.submit()">
                    @for (int i = 1; i <= 12; i++)
                    {
                        <option value="@i" selected="@(i == currentMonth)">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
                    }
                </select>
                <select name="year" onchange="this.form.submit()">
                    @for (int i = DateTime.Today.Year - 5; i <= DateTime.Today.Year + 5; i++)
                    {
                        <option value="@i" selected="@(i == currentYear)">@i</option>
                    }
                </select>
            </div>
            <table style="width: 100%; border-collapse: collapse;">
                <thead>
                    <tr>
                        <th>Вс</th>
                        <th>Пн</th>
                        <th>Вт</th>
                        <th>Ср</th>
                        <th>Чт</th>
                        <th>Пт</th>
                        <th>Сб</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int day = 1;
                        bool started = false;
                        for (int i = 0; i < 6; i++)
                        {
                            <tr>
                                @for (int j = 0; j < 7; j++)
                                {
                                    if (!started && j == firstDayOfWeek)
                                    {
                                        started = true;
                                    }
                                    if (started && day <= daysInMonth)
                                    {
                                        var currentDate = new DateTime(currentYear, currentMonth, day);
                                        var isToday = currentDate.Date == today.Date;
                                        var isSelected = currentDate.Date == selectedDate.Date;
                                        var hasWorkout = workoutDates.Any(d => d == currentDate.Date);

                                        string backgroundColor = "";
                                        if (isSelected)
                                        {
                                            backgroundColor = "background-color: #4caf50;";
                                        }
                                        else if (isToday)
                                        {
                                            backgroundColor = "background-color: #ffeb3b;";
                                        }
                                        else if (hasWorkout)
                                        {
                                            backgroundColor = "background-color: #2196f3;";
                                        }

                                        <td style="text-align: center; @backgroundColor">
                                            <a href="@Url.Action("Index", new { date = currentDate.ToString("yyyy-MM-dd"), month = currentMonth, year = currentYear })"
                                               style="display: block; text-decoration: none; color: black; @(isToday || isSelected ? "font-weight: bold;" : "")">
                                                @day
                                            </a>
                                        </td>
                                        day++;
                                    }
                                    else
                                    {
                                        <td></td>
                                    }
                                }
                            </tr>
                            if (day > daysInMonth)
                            {
                                break;
                            }
                        }
                    }
                </tbody>
            </table>
        </form>
    </div>

    <!-- Список тренировок -->
    <div style="width: 70%; padding: 10px;">
        <h2>Тренировки за @ViewBag.SelectedDate.ToString("yyyy-MM-dd")</h2>

        <!-- Форма для создания новой тренировки -->
        <h3>Добавить тренировку</h3>
        <form asp-action="Create" method="post" id="createWorkoutForm">
            <input type="hidden" name="Date" value="@ViewBag.SelectedDate.ToString("yyyy-MM-dd")" />
            <textarea name="Note" id="noteInput" placeholder="Заметка" rows="3" cols="50" required></textarea>
            <br />
            <button type="submit" id="submitButton" disabled>Сохранить</button>
        </form>

        <!-- Список тренировок -->
        @foreach (var workout in Model)
        {
            <div style="border: 1px solid #ccc; margin: 10px 0; padding: 10px;">
                <h3>Тренировка #@workout.Id</h3>

                <!-- Измененная секция: редактируемая заметка -->
                <p>
                    <textarea class="editable-note" data-workout-id="@workout.Id"
                              style="width: 100%;">@workout.Note</textarea>
                </p>

                <h4>Упражнения:</h4>
                <ul>
                    @foreach (var we in workout.WorkoutExercises)
                    {
                        <li class="exercise-item" data-exercise-id="@we.Id">
                            @we.Exercise.Name -
                            Подходы: <input type="number" class="edit-sets" value="@we.Sets" min="1" style="width: 50px;" />,
                            Повторения: <input type="number" class="edit-reps" value="@we.Reps" min="1" style="width: 50px;" />,
                            Вес: <input type="number" class="edit-weight" value="@we.Weight" step="0.1" min="0" style="width: 70px;" /> кг
                            <a asp-action="DeleteExercise" asp-route-id="@we.Id" onclick="return confirm('Удалить упражнение?')">Удалить</a>
                            <span class="save-status" style="margin-left: 10px; color: green; display: none;">✓</span>
                        </li>
                    }
                </ul>

                <!-- Форма для добавления упражнения -->
                <form asp-action="AddExercise" method="post">
                    <input type="hidden" name="workoutId" value="@workout.Id" />
                    <input type="hidden" name="Date" value="@ViewBag.SelectedDate.ToString("yyyy-MM-dd")" />
                    <select name="exerciseId">
                        @foreach (var exercise in ViewBag.Exercises)
                        {
                            <option value="@exercise.Id">@exercise.Name</option>
                        }
                    </select>
                    <input type="number" name="sets" placeholder="Подходы" required min="1" />
                    <input type="number" name="reps" placeholder="Повторения" required min="1" />
                    <input type="number" name="weight" placeholder="Вес (кг)" step="0.1" required min="0" />
                    <button type="submit">Добавить</button>
                </form>

                <!-- Удаленная кнопка редактирования -->
                <div style="margin-top: 10px;">
                    <a asp-action="Delete" asp-route-id="@workout.Id" onclick="return confirm('Вы уверены, что хотите удалить эту тренировку?')">Удалить</a>
                </div>
            </div>
        }
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Обработка создания тренировки
        const noteInput = document.getElementById("noteInput");
        const submitButton = document.getElementById("submitButton");

        submitButton.disabled = noteInput.value.trim() === "";
        noteInput.addEventListener("input", function () {
            submitButton.disabled = noteInput.value.trim() === "";
        });

        // Новый код: обработка изменений заметки
        document.querySelectorAll('.editable-note').forEach(element => {
            element.addEventListener('input', debounce(function (e) {
                const workoutId = e.target.getAttribute('data-workout-id');
                const newNote = e.target.value;

                fetch(`/Workouts/UpdateNote?id=${workoutId}&note=${encodeURIComponent(newNote)}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                    .then(response => {
                        if (!response.ok) throw new Error('Ошибка сохранения');
                    })
                    .catch(error => {
                        alert(error.message);
                    });
            }, 500));
        });

        document.querySelectorAll('.exercise-item').forEach(item => {
            const exerciseId = item.dataset.exerciseId;
            const setsInput = item.querySelector('.edit-sets');
            const repsInput = item.querySelector('.edit-reps');
            const weightInput = item.querySelector('.edit-weight');
            const status = item.querySelector('.save-status');

            function updateExercise() {
                const data = {
                    id: exerciseId,
                    sets: parseInt(setsInput.value),
                    reps: parseInt(repsInput.value),
                    weight: parseFloat(weightInput.value)
                };

                fetch('/Workouts/UpdateExercise', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => {
                        if (response.ok) {
                            status.style.display = 'inline';
                            setTimeout(() => status.style.display = 'none', 2000);
                        } else {
                            alert('Ошибка сохранения');
                        }
                    })
                    .catch(error => console.error('Error:', error));
            }

            setsInput.addEventListener('change', debounce(updateExercise, 500));
            repsInput.addEventListener('change', debounce(updateExercise, 500));
            weightInput.addEventListener('change', debounce(updateExercise, 500));
        });
    });

    // Функция для предотвращения частых запросов
    function debounce(func, wait) {
        let timeout;
        return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }
</script>