@model List<WorkoutDiary.Models.Workout>
@{
    ViewData["Title"] = "Дневник тренировок";

    var currentMonth = ViewBag.CurrentMonth;
    var currentYear = ViewBag.CurrentYear;
    var daysInMonth = DateTime.DaysInMonth(currentYear, currentMonth);
    var firstDayOfMonth = new DateTime(currentYear, currentMonth, 1);
    var firstDayOfWeek = (int)firstDayOfMonth.DayOfWeek;
    var today = DateTime.Today;
    var selectedDate = (DateTime)ViewBag.SelectedDate;
    var workoutDates = (List<DateTime>)ViewBag.WorkoutDates;
}

<div class="container-fluid">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success animate-fade-in">
            @TempData["SuccessMessage"]
        </div>
    }

    <div class="row">
        <!-- Календарь -->
        <div class="col-md-4">
            <div class="calendar-container animate-fade-in">
                <h3>Календарь</h3>
                <form asp-action="Index" method="get" id="calendarForm">
                    <div class="mb-3">
                        <select name="month" class="form-select" onchange="this.form.submit()">
                            @for (int i = 1; i <= 12; i++)
                            {
                                <option value="@i" selected="@(i == currentMonth)">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
                            }
                        </select>
                        <select name="year" class="form-select mt-2" onchange="this.form.submit()">
                            @for (int i = DateTime.Today.Year - 5; i <= DateTime.Today.Year + 5; i++)
                            {
                                <option value="@i" selected="@(i == currentYear)">@i</option>
                            }
                        </select>
                    </div>
                    <table class="calendar-table">
                        <thead>
                            <tr>
                                <th>Вс</th>
                                <th>Пн</th>
                                <th>Вт</th>
                                <th>Ср</th>
                                <th>Чт</th>
                                <th>Пт</th>
                                <th>Сб</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int day = 1;
                                bool started = false;
                                for (int i = 0; i < 6; i++)
                                {
                                    <tr>
                                        @for (int j = 0; j < 7; j++)
                                        {
                                            if (!started && j == firstDayOfWeek)
                                            {
                                                started = true;
                                            }
                                            if (started && day <= daysInMonth)
                                            {
                                                var currentDate = new DateTime(currentYear, currentMonth, day);
                                                var isToday = currentDate.Date == today.Date;
                                                var isSelected = currentDate.Date == selectedDate.Date;
                                                var hasWorkout = workoutDates.Any(d => d == currentDate.Date);

                                                string cellClass = "";
                                                if (isSelected)
                                                {
                                                    cellClass = "selected";
                                                }
                                                else if (isToday)
                                                {
                                                    cellClass = "today";
                                                }
                                                else if (hasWorkout)
                                                {
                                                    cellClass = "has-workout";
                                                }

                                                <td class="@cellClass">
                                                    @day
                                                    <a href="@Url.Action("Index", new { date = currentDate.ToString("yyyy-MM-dd"), month = currentMonth, year = currentYear })"></a>
                                                </td>
                                                day++;
                                            }
                                            else
                                            {
                                                <td></td>
                                            }
                                        }
                                    </tr>
                                    if (day > daysInMonth)
                                    {
                                        break;
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </form>
            </div>
        </div>

        <!-- Список тренировок -->
        <div class="col-md-8">
            <div class="workout-list animate-fade-in">
                <h2>Тренировки за @ViewBag.SelectedDate.ToString("yyyy-MM-dd")</h2>

                <!-- Форма для создания новой тренировки -->
                <h3>Добавить тренировку</h3>
                <form asp-action="Create" method="post" id="createWorkoutForm" class="create-workout-form">
                    <input type="hidden" name="Date" value="@ViewBag.SelectedDate.ToString("yyyy-MM-dd")" />
                    <textarea name="Note" id="noteInput" class="form-control" placeholder="Заметка" rows="3" required></textarea>
                    <button type="submit" id="submitButton" class="btn btn-primary mt-2" disabled>Сохранить</button>
                </form>

                <!-- Список тренировок -->
                @foreach (var workout in Model)
                {
                    <div class="workout-item animate-fade-in">
                        <h3>Тренировка</h3>
                        <textarea class="editable-note form-control" data-workout-id="@workout.Id">@workout.Note</textarea>
                        <h4>Упражнения:</h4>
                        <ul>
                            @foreach (var we in workout.WorkoutExercises)
                            {
                                <li class="exercise-item" data-exercise-id="@we.Id">
                                    @we.Exercise.Name -
                                    Подходы: <input type="number" class="edit-sets" value="@we.Sets" min="1" />
                                    Повторения: <input type="number" class="edit-reps" value="@we.Reps" min="1" />
                                    Вес: <input type="number" class="edit-weight" value="@we.Weight" step="1" min="1" /> кг
                                    <form asp-action="DeleteExercise" method="post" style="display: inline;">
                                        <input type="hidden" name="id" value="@we.Id" />
                                        <span class="delete-exercise" onclick="if(confirm('Вы уверены, что хотите удалить это упражнение?')) this.closest('form').submit();">×</span>
                                    </form>
                                    <span class="save-status" style="color: green; display: none;">✓</span>
                                </li>
                            }
                        </ul>
                        <form asp-action="AddExercise" method="post" class="add-exercise-form">
                            <input type="hidden" name="workoutId" value="@workout.Id" />
                            <input type="hidden" name="Date" value="@ViewBag.SelectedDate.ToString("yyyy-MM-dd")" />
                            <div class="exercise-autocomplete">
                                <input type="text" name="exerciseName" class="exercise-input form-control" placeholder="Начните вводить название..." list="exercisesList" autocomplete="off" required minlength="3" data-selected-id="" />
                                <input type="hidden" name="exerciseId" id="selectedExerciseId" />
                                <datalist id="exercisesList">
                                    @foreach (var exercise in ViewBag.Exercises)
                                    {
                                        <option value="@exercise.Name" data-id="@exercise.Id"></option>
                                    }
                                </datalist>
                                <span class="error-message" id="exerciseError"></span>
                            </div>
                            <input type="number" name="sets" class="form-control" placeholder="Подходы" required min="1" />
                            <input type="number" name="reps" class="form-control" placeholder="Повторения" required min="1" />
                            <input type="number" name="weight" class="form-control" placeholder="Вес (кг)" step="1" required min="1" />
                            <button type="submit" class="btn btn-primary">Добавить</button>
                        </form>
                        <div class="mt-3">
                            <a asp-action="Delete" asp-route-id="@workout.Id" class="btn btn-danger" onclick="return confirm('Вы уверены, что хотите удалить эту тренировку?')">Удалить тренировку</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Обработка создания тренировки
        const noteInput = document.getElementById("noteInput");
        const submitButton = document.getElementById("submitButton");

        submitButton.disabled = noteInput.value.trim() === "";
        noteInput.addEventListener("input", function () {
            submitButton.disabled = noteInput.value.trim() === "";
        });

        document.querySelectorAll('.editable-note').forEach(element => {
            element.addEventListener('input', debounce(function (e) {
                const workoutId = e.target.getAttribute('data-workout-id');
                const newNote = e.target.value;

                fetch(`/Workouts/UpdateNote?id=${workoutId}&note=${encodeURIComponent(newNote)}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                    .then(response => {
                        if (!response.ok) throw new Error('Ошибка сохранения');
                    })
                    .catch(error => {
                        alert(error.message);
                    });
            }, 500));
        });

        // Обработка изменений упражнений
        document.querySelectorAll('.exercise-item').forEach(item => {
            const exerciseId = item.dataset.exerciseId;
            const setsInput = item.querySelector('.edit-sets');
            const repsInput = item.querySelector('.edit-reps');
            const weightInput = item.querySelector('.edit-weight');
            const status = item.querySelector('.save-status');

            function updateExercise() {
                const data = {
                    id: exerciseId,
                    sets: parseInt(setsInput.value),
                    reps: parseInt(repsInput.value),
                    weight: parseFloat(weightInput.value)
                };

                fetch('/Workouts/UpdateExercise', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => {
                        if (response.ok) {
                            status.style.display = 'inline';
                            setTimeout(() => status.style.display = 'none', 2000);
                        } else {
                            alert('Ошибка сохранения');
                        }
                    })
                    .catch(error => console.error('Error:', error));
            }

            setsInput.addEventListener('change', debounce(updateExercise, 500));
            repsInput.addEventListener('change', debounce(updateExercise, 500));
            weightInput.addEventListener('change', debounce(updateExercise, 500));
        });

        // Обработка автодополнения упражнений
        document.querySelectorAll('.exercise-input').forEach(input => {
            input.addEventListener('input', function () {
                const searchTerm = this.value.toLowerCase();
                const datalist = document.getElementById('exercisesList');

                this.addEventListener('change', function () {
                    const selectedOption = Array.from(datalist.options).find(
                        opt => opt.value === this.value
                    );
                    if (selectedOption) {
                        this.dataset.exerciseId = selectedOption.dataset.id;
                    }
                });
            });
        });

        // Обработка формы добавления упражнения
        document.querySelectorAll('.add-exercise-form').forEach(form => {
            form.addEventListener('submit', function (e) {
                const exerciseInput = this.querySelector('.exercise-input');
                if (exerciseInput.value.trim().length < 3) {
                    e.preventDefault();
                    document.getElementById('exerciseError').textContent =
                        'Название должно содержать минимум 3 символа';
                }
            });

            form.querySelector('.exercise-input').addEventListener('input', function () {
                document.getElementById('exerciseError').textContent = '';
            });
        });

        // Установка exerciseId при выборе из списка
        document.querySelectorAll('.exercise-input').forEach(input => {
            input.addEventListener('change', function () {
                const selectedOption = Array.from(document.getElementById('exercisesList').options)
                    .find(opt => opt.value === this.value);
                if (selectedOption) {
                    document.getElementById('selectedExerciseId').value = selectedOption.dataset.id;
                }
            });
        });
    });

    // Функция для предотвращения частых запросов
    function debounce(func, wait) {
        let timeout;
        return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }
</script>